# vim: ft=zsh foldmethod=marker foldlevel=1 nomodeline:

if [[ -n "$ZSH_DEBUGRC" ]]; then
  zmodload zsh/zprof
fi

# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
() { [[ -r $1 ]] && source $1 } ${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${USERNAME}.zsh

# start znap {{{
zstyle ':znap:*' repos-dir $HOME/.znap

[[ ! -f ~/.znap/zsh-snap/znap.zsh ]] &&
  git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/.znap/zsh-snap

source ~/.znap/zsh-snap/znap.zsh

znap source romkatv/powerlevel10k powerlevel10k.zsh-theme
znap source ohmyzsh/ohmyzsh \
  lib/{clipboard,history,key-bindings,directories} \
  plugins/{git,git-extras,safe-paste,ssh,sudo,command-not-found}
# znap source ohmyzsh/ohmyzsh plugins/{git,git-extras,safe-paste}
# znap source ohmyzsh/ohmyzsh plugins/{ssh,sudo,copybuffer,copypath}

# === local sources ===
# unfortunately it's not possible to load local source
# znap source ~/dotfiles/zsh/completions

# === other plugins ===
# znap source zdharma-continuum/fast-syntax-highlighting
znap source z-shell/f-sy-h
znap source marlonrichert/zsh-autocomplete
znap source marlonrichert/zsh-edit
znap source zsh-users/zsh-history-substring-search
znap source zsh-users/zsh-completions
znap source zsh-users/zsh-autosuggestions
znap source michaelaquilina/zsh-you-should-use

# === lazy via znap function (documented) ===
# znap source bigh/git-fuzzy # can't load this here, znap can only manage it, add bin to path
znap source junegunn/fzf shell/{completion,key-bindings}.zsh
znap source le0me55i/zsh-extract # extract
znap source babarot/enhancd 'init.sh'  # alias to cd for trigger
# command -v zoxide &> /dev/null || znap source agkozak/zsh-z

znap source jeffreytse/zsh-vi-mode

# }}}

# Set ENV VARIABLE {{{
setopt interactive_comments

OS_NAME=$(uname)
HOST_NAME=$(hostname)
DOTFILES=$HOME/dotfiles

exists() { command -v "$1" >/dev/null 2>&1; }
is_day() { [ "$(date +%H)" -ge 8 ] && [ "$(date +%H)" -le 19 ]; }

# OS specific ENVIRONMENT VARIABLE
if [[ $OS_NAME == Linux ]]; then
  export DENO_INSTALL='/home/kuntau/.deno'

  # nnn
  export NNN_OPENER='nuke'

  # machine specific ENVIRONMENT VARIABLE
  if [[ $HOST_NAME == 'hqsvr' ]]; then
    export COMPOSER_HOME=$HOME/.composer

    # atuin - https://atuin.sh
    source $HOME/.atuin/bin/env

    export NNN_BMS='d:~/dotfiles;D:/DL/Downloads;v:/HQPOOL/Videos;c:/HQPOOL/Coding;T:/HQPOOL/DATA;P:/HQPOOL;C:~/.config/;L:~/.local;f:/HQPOOL/Coding/forks'
  fi
elif [[ $OS_NAME == Darwin ]]; then
  # python: https://docs.python.org/3/using/cmdline.html#environment-variables
  export PYTHONUSERBASE=~/.local
  export PATH=$PATH:$HOME/Library/Python/3.9/bin

  # GPG. Read https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key
  GPG_TTY=$(tty)
  export GPG_TTY

  # Homebrew
  export HOMEBREW_CASK_OPTS="--appdir=~/Applications"
  export HOMEBREW_NO_AUTO_UPDATE=1
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export HOMEBREW_AUTO_UPDATE_SECS=86400
  export HOMBREW_GIT_PATH=/opt/local/bin/git

  # nnn
  export NNN_OPENER='open' # set MacOS nnn opener

  # Add MacPorts MAN path
  export MANPATH=$MANPATH:/opt/local/man

  # LSP
  export PATH=~/.local/share/nvim/mason/bin:$PATH # Mason LSP bin dir

  # machine specific ENVIRONMENT VARIABLE
  if [[ $HOST_NAME == 'HQ' ]]; then
    export ANDROID_HOME=/Volumes/HOME/Android/SDK
    export PATH=$PATH:/Volumes/HOME/Android/flutter/bin
    export NNN_BMS='D:~/dotfiles;d:/Volumes/HOME/Downloads;E:/Volumes/Entertainment;f:~/coding/forks;c:~/coding;C:~/.config;L:~/.local;T:~/Dropbox/transporter'
  elif [[ $HOST_NAME == 'rMBP' ]]; then
    export ANDROID_HOME=~/Library/Android/sdk
    export NNN_BMS='D:~/dotfiles;d:~/downloads;f:~/coding/forks;c:~/coding;C:~/.config;L:~/.local;V:/Volumes;T:~/Dropbox/transporter'
  elif [[ $HOST_NAME == 'MBA' ]]; then
    exists brew && export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$PATH           # pip app binary path
    export NNN_BMS='D:~/dotfiles;d:~/Downloads;f:~/Coding/forks;c:~/Coding;C:~/.config;L:~/.local;V:/Volumes;T:~/Dropbox/transporter'
  fi
elif [[ $OS_NAME == CYGWIN_NT-6.1 ]]; then
  export PATH=/usr/local/bin:/usr/bin:/cygdrive/c/"Program Files (x86)/NVIDIA Corporation"/PhysX/Common:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/"Program Files/Intel/DMIX":$PATH
  source ~/dotfiles/mintty/sol.dark
fi

# Add MAN path
export MANPATH=$MANPATH:$ZPLUG_HOME/doc/man

# Fix locale
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
# }}}

# Plugins config & ENV {{{

# Theme - Auto dark/light based on time
light_theme='catppuccin-latte'
dark_theme='catppuccin-mocha'

# vivid - LS_COLORS generator
exists vivid && LS_COLORS=$(vivid generate $(is_day && echo $light_theme || echo $dark_theme))
export LS_COLORS

# Kitty
kitty_theme=$(is_day && echo $light_theme || echo $dark_theme)
[[ -n $KITTY_PID ]] && $command kitten themes $kitty_theme

# zsh-autosuggestions. https://github.com/zsh-users/zsh-autosuggestions?tab=readme-ov-file#configuration
autosuggest_light_theme="#808080"
autosuggest_dark_theme="#585858"
autosuggest_theme=$(is_day && echo $autosuggest_light_theme || echo $autosuggest_dark_theme)
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=${autosuggest_theme},italic"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
# ZSH_AUTOSUGGEST_CLEAR_WIDGETS # TODO: Add widgets like atuin & autocomplete

# zsh-autcomplete configs https://github.com/marlonrichert/zsh-autocomplete/blob/main/.zshrc
# Some snippets from https://github.com/tshu-w/dotfiles/blob/f06c7c7f7084e615c82d4d56efb008b39bdb24cd/config/zsh/.zshrc#L33-L48
# zstyle '*:compinit' arguments -D -i -u -C -w # might cause `compinit` not generating `zcompdump`
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}     # use with `vivid`
zstyle ':completion:*' file-sort date
zstyle ':completion:*:*' matcher-list 'm:{[:lower:]-}={[:upper:]_}' '+r:|[.]=**'
zstyle ':completion:*:paths' path-completion yes
# zstyle ':autocomplete:*' ignored-input '..##'
zstyle ':autocomplete:*' add-space executables aliases functions builtins reserved-words commands
zstyle ':autocomplete:*' min-delay 0.3  # seconds (float)
zstyle ':autocomplete:*' min-input 2  # characters (int)
zstyle ':autocomplete:*' insert-unambiguous yes
zstyle ':autocomplete:*' fzf-completion yes
# zstyle ':autocomplete:*' default-context history-incremental-search-backward
bindkey -M menuselect "^[m" accept-and-hold
bindkey -M menuselect "^M" .accept-line


# nnn - https://github.com/jarun/nnn
NNN_PLUG_FZF='c:fzcd;o:fzopen;j:autojump;h:fzhist;p:fzplug;g:gitroot'
NNN_PLUG_REST='3:mp3conv;4:ipinfo;v:preview-tui;s:chksum;x:!chmod +x "$nnn";m:-!|mediainfo "$nnn";k:pskill;i:imgview;l:launch'
NNN_PLUG="$NNN_PLUG_FZF;$NNN_PLUG_REST"
export NNN_PLUG
export NNN_OPTS='acEFrxQU'
BLK="04" CHR="04" DIR="04" EXE="00" REG="00" HARDLINK="00" SYMLINK="06" MISSING="00" ORPHAN="01" FIFO="0F" SOCK="0F" OTHER="02"
export NNN_COLORS='a321e2be;1234'
export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
# export NNN_FCOLORS='c1e2272e006033f7c6d6abc4'
export NNN_TRASH=0

# bat - https://github.com/sharkdp/bat
BAT_LIGHT_THEME="Monokai Extended Light"
BAT_DARK_THEME="Monokai Extended"
export BAT_OPTS="--color=always"
export BAT_THEME="$(is_day && echo $BAT_LIGHT_THEME || echo $BAT_DARK_THEME)"
export BAT_STYLE="plain"
export BAT_PAGER="less -RS"

# enhancd - https://github.com/babarot/enhancd
export ENHANCD_FILTER=fzf
export ENHANCD_DISABLE_DOT=0
export ENHANCD_DISABLE_HYPHEN=0

# ripgrep - https://github.com/BurntSushi/ripgrep
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# NOTE: Need more research
# zsh-vi-mode - https://github.com/jeffreytse/zsh-vi-mode
# export ZVM_INIT_MODE=sourcing
# export ZVM_CURSOR_STYLE_ENABLED=true

# FIX the blinding green on green directory listing on external drive.
# Read more https://unix.stackexchange.com/questions/94498/what-causes-this-green-background-in-ls-output
# This should not be needed anymore since we use `vivid`, I'll keep it until we can properly test
if [[ -f ~/.dircolors ]]; then
  eval "$(dircolors -b ~/.dircolors)"
elif [[ -f /etc/DIR_COLORS ]]; then
  eval "$(dircolors -b /etc/DIR_COLORS)"
fi
# }}}

# Update $PATH (platform *nix)) {{{
exists npm      && export NPM_CONFIG_PREFIX=$HOME/.npm-global   # npm -g install location
exists npm      && export PATH=$HOME/.npm-global/bin:$PATH      # npm global binary path
exists pnpm     && export PNPM_HOME=$HOME/.npm-global/bin       # pnpm global binary path
exists pip      && export PATH=$HOME/.local/bin:$PATH           # pip app binary path
exists cargo    && export PATH=$HOME/.cargo/bin:$PATH           # rust cargo binary path
exists composer && export PATH=$HOME/.composer/vendor/bin:$PATH # composer global binary path
exists go       && export PATH=$HOME/go/bin:$PATH               # go binary path
exists snap     && export PATH=/snap/bin:$PATH                  # snap binary path
exists deno     && export PATH=$PATH:$DENO_INSTALL/bin          # deno binary path
export PATH=$DOTFILES/bin:$PATH                                 # dotfiles binary path
# }}}

# Extra sources {{{
# zsh-vi-mode messed with key-bindings. So need to set ours after `zvm` init
function zvm_after_init() {
  bindkey              '^I' menu-complete
  bindkey "$terminfo[kcbt]" reverse-menu-complete
  bindkey              '^I' menu-select
  bindkey "$terminfo[kcbt]" menu-select
  bindkey -M menuselect              '^I'         menu-complete
  bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete

  [[ -x rustup ]] && source $HOME/.cargo/env
  [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
  exists fzf && source $DOTFILES/zsh/fzf.zsh
  exists atuin && eval "$(atuin init zsh)" # atuin - sync, search & backup shell history
  exists zoxide && eval "$(zoxide init zsh)" # zoxide - modern z
  exists nnn && source $DOTFILES/nnn/quitcd.zsh

  # Customs
  bindkey -M viins '^Xa' _expand_alias
  bindkey -M viins '^R' atuin-search-viins
  bindkey -M vicmd '' up-line-or-history
  bindkey -M vicmd '' down-line-or-history

  # zsh-history-substring-search configuration
  bindkey '^[[A' history-substring-search-up   # or '\eOA' = Up arrow
  bindkey '^[[B' history-substring-search-down # or '\eOB' = Down arrow
  export HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1

  # linuxbrew
  [[ -d /home/linuxbrew ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  source $DOTFILES/zsh/default.zsh # my defaults
  source $DOTFILES/zsh/aliases.zsh # my aliases
  source $HOME/.secret             # don't commit this file
  typeset -U PATH                  # remove dups from $PATH
  typeset -U MANPATH               # remove dups from $MANPATH
}

[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

if [[ -n "$ZSH_DEBUGRC" ]]; then
  zprof
fi
# }}}
