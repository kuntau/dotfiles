# vim: foldmethod=marker foldlevel=0 nomodeline:

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# start zplug {{{
source ~/.zplug/init.zsh

# zplug can manage itself
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# from oh-my-zsh
zplug "lib/clipboard",          depth:1, from:oh-my-zsh
zplug "lib/history",            from:oh-my-zsh
zplug "lib/completion",         from:oh-my-zsh
zplug "lib/key-bindings",       from:oh-my-zsh
zplug "lib/directories",        from:oh-my-zsh
zplug "plugins/brew",           from:oh-my-zsh
zplug "plugins/git",            from:oh-my-zsh
zplug "plugins/git-extras",     from:oh-my-zsh
zplug "plugins/git-flow",       from:oh-my-zsh
zplug "plugins/node",           from:oh-my-zsh
zplug "plugins/npm",            from:oh-my-zsh
zplug "plugins/tmux",           from:oh-my-zsh
zplug "plugins/safe-paste",     from:oh-my-zsh
zplug "plugins/docker",         from:oh-my-zsh
zplug "plugins/docker-compose", from:oh-my-zsh

# local/dotfiles
# zplug "~/dotfiles/zsh/completions", from:local, use:_hx.zsh

# from github
zplug "jeffreytse/zsh-vi-mode", depth:1
zplug "zsh-users/zsh-completions", depth:1
zplug "marlonrichert/zsh-autocomplete", depth:1, defer:2
zplug "zsh-users/zsh-autosuggestions", depth:1
zplug "z-shell/F-Sy-H", depth:1, defer:3
zplug "b4b4r07/enhancd", depth:1, use:init.sh
zplug "agkozak/zsh-z", depth:1

# theme
zplug "romkatv/powerlevel10k", depth:1, use:powerlevel10k.zsh-theme

if ! zplug check; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi

zplug load
# }}}

# Set ENV VARIABLE {{{
OS_NAME=$(uname)
HOST_NAME=$(hostname)
DOTFILES=$HOME/dotfiles

exists() { type "$1" >/dev/null 2>&1; }

# OS specific ENVIRONMENT VARIABLE
if [[ $OS_NAME == Linux ]]; then
  # export PATH=~/npm/bin:/usr/local/go/bin:$PATH
  # export PATH=~/.local/bin:$PATH
  # rust
  # golang
  export PATH=$PATH:/usr/local/go/bin
  export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
  export DENO_INSTALL='/home/kuntau/.deno'
  export PATH=~/.local/lsp/lua-language-server/bin:$PATH # Sumneko lua path

  # GPG. Read https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key
  export GPG_TTY=$(tty)

  # nnn
  export NNN_OPENER='nuke'

  # machine specific ENVIRONMENT VARIABLE
  if [[ $HOST_NAME == 'hqsvr' ]]; then
    export COMPOSER_HOME=$HOME/.composer
    export NNN_BMS='d:~/dotfiles;b:/DL;v:/HQPOOL/Videos;c:/HQPOOL/DATA/Coding;T:/HQPOOL/DATA;p:/HQPOOL;D:/HQPOOL/Downloads'
  fi
elif [[ $OS_NAME == Darwin ]]; then

  # python: https://docs.python.org/3/using/cmdline.html#environment-variables
  export PYTHONUSERBASE=~/.local
  export PATH=$PATH:$HOME/Library/Python/3.9/bin

  # GPG. Read https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key
  export GPG_TTY=$(tty)

  # Homebrew
  export HOMEBREW_CASK_OPTS="--appdir=~/Applications"
  export HOMEBREW_NO_AUTO_UPDATE=0
  export HOMEBREW_NO_INSTALL_CLEANUP=0
  export HOMEBREW_AUTO_UPDATE_SECS=86400

  # One off binary. Homebrew installation
  export PATH=/usr/local/opt/ncurses/bin:$PATH # Homebrew's ncurses
  export PATH=/usr/local/opt/sqlite/bin:$PATH  # Homebrew's sqlite3

  # nnn
  export NNN_OPENER='open'

  # machine specific ENVIRONMENT VARIABLE
  if [[ $HOST_NAME == 'HQ' ]]; then
    export ANDROID_HOME=/Volumes/HOME/Android/SDK
    export PATH=$PATH:/Volumes/HOME/Android/flutter/bin
    export NNN_BMS='d:~/dotfiles;D:/Volumes/HOME/Downloads;E:/Volumes/Entertainment;f:~/coding/forks;c:~/coding;C:~/.config;L:~/.local'
  elif [[ $HOST_NAME == 'rMBP' ]]; then
    export ANDROID_HOME=~/Library/Android/sdk
    export NNN_BMS='d:~/dotfiles;D:~/downloads;f:~/coding/forks;c:~/coding;C:~/.config;L:~/.local'
  fi
elif [[ $OS_NAME == CYGWIN_NT-6.1 ]]; then
  export PATH=/usr/local/bin:/usr/bin:/cygdrive/c/"Program Files (x86)/NVIDIA Corporation"/PhysX/Common:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/"Program Files/Intel/DMIX":$PATH
  source ~/dotfiles/mintty/sol.dark
fi

# Fix locale
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
# }}}

# Plugins config & ENV {{{
# zsh-completions. https://github.com/zsh-users/zsh-completions/
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=240"   # fg=#707a8c,bg=cyan,bold,underline"

# zsh-history-substring-search. https://github.com/zsh-users/zsh-history-substring-search
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# nnn - https://github.com/jarun/nnn
NNN_PLUG_FZF='c:fzcd;o:fzopen;j:autojump;h:fzhist;p:fzplug;g:gitroot'
NNN_PLUG_REST='3:mp3conv;4:ipinfo;v:preview-tui;s:chksum;x:!chmod +x "$nnn";m:-!|mediainfo "$nnn";k:pskill;i:imgview;l:launch'
NNN_PLUG="$NNN_PLUG_FZF;$NNN_PLUG_REST"
export NNN_PLUG
export NNN_OPTS='acdEHFrxQU'
BLK="04" CHR="04" DIR="04" EXE="00" REG="00" HARDLINK="00" SYMLINK="06" MISSING="00" ORPHAN="01" FIFO="0F" SOCK="0F" OTHER="02"
export NNN_COLORS='a321e2be;1234'
export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
# export NNN_FCOLORS='c1e2272e006033f7c6d6abc4'
export NNN_TRASH=0

# bat - https://github.com/sharkdp/bat
export BAT_THEME="gruvbox-dark"
export BAT_STYLE="plain"
export BAT_PAGER="less -RS"

# enhancd - https://github.com/b4b4r07/enhancd
export ENHANCD_FILTER=fzf
export ENHANCD_DISABLE_DOT=0
export ENHANCD_DISABLE_HYPHEN=0
export ENHANCD_HYPHEN_ARG=';'
export ENHANCD_DOT_ARG='.'

# zsh-vi-mode - https://github.com/jeffreytse/zsh-vi-mode
export ZVM_CURSOR_STYLE_ENABLED=false

# FIX the blinding green on green directory listing on external drive.
# Read more https://unix.stackexchange.com/questions/94498/what-causes-this-green-background-in-ls-output
if [[ -f ~/.dircolors ]]; then
  eval $(dircolors -b ~/.dircolors)
elif [[ -f /etc/DIR_COLORS ]]; then
  eval $(dircolors -b /etc/DIR_COLORS)
fi
# }}}

# Update $PATH (platform *nix)) {{{
exists npm      && export NPM_CONFIG_PREFIX=$HOME/.npm-global   # npm -g install location
exists npm      && export PATH=$HOME/.npm-global/bin:$PATH      # npm global binary path
exists pnpm     && export PNPM_HOME=$HOME/.npm-global/bin       # pnpm global binary path
exists python3  && export PATH=$HOME/.local/bin:$PATH           # pip app binary path
exists cargo    && export PATH=$HOME/.cargo/bin:$PATH           # rust cargo binary path
exists composer && export PATH=$HOME/.composer/vendor/bin:$PATH # composer global binary path
exists snap     && export PATH=/snap/bin:$PATH                  # snap binary path
export PATH=$PATH:$DENO_INSTALL/bin                             # deno binary path
export PATH=$PATH:/usr/local/sbin                               # some brew installed in `sbin`
export PATH=$DOTFILES/bin:$PATH
# }}}

# Extra sources {{{
# zsh-vi-mode messed with key-bindings. So need to set ours after `zvm` init
function zvm_after_init() {
  [[ -x rustup ]] && source $HOME/.cargo/env
  [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
  exists fzf && source $DOTFILES/zsh/fzf.zsh
  exists nnn && source $DOTFILES/nnn/quitcd.zsh

  source $DOTFILES/zsh/default.zsh # my defaults
  source $DOTFILES/zsh/aliases.zsh # my aliases
  source $HOME/.secret             # don't commit this file
  typeset -U PATH                  # remove dups from $PATH
}

[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
# }}}
