# vim:set foldmethod=marker foldlevel=0 ft=tmux:

# Core Settings {{{

# Version-specific commands [grumble, grumble] See: https://github.com/tmux/tmux/blob/master/CHANGES
# Record tmux version (handles "next-" builds)
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | sed -E "s/^tmux[[:space:]]+//; s/^next-//; s/[^0-9.].*//")'

# Version fallback if the above failed
if -b '[ -z "$TMUX_VERSION" ]' 'tmux setenv -g TMUX_VERSION 3.0'

# 24-bit color and sane defaults
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-kitty:Tc,wezterm:Tc,ghostty:Tc,*256col*:colors=256:Tc"

# TODO: Report bug to fix OSC 52 in tmux copy mode
# set -ga terminal-features 'mosh*:XT:Ms=1'
# set -ga terminal-overrides ',mosh*:Ms=\E]52;c;%p2%s\a'

# Ms modifies OSC 52 clipboard handling to work with mosh for Tmux below 3.3. Break OSC52 if enabled on Tmux >= 3.3
if-shell '[ "$(echo "$TMUX_VERSION < 3.3" | bc)" = 1 ]' \
  'set -ga terminal-overrides ",vte*:XT:Ms=\\E]52;c;%p2%s\\7,xterm*:XT:Ms=\\E]52;c;%p2%s\\7"'

# Enable native OSC52 clipboard passthrough. (replaces legacy Ms= override which breaks modern passthrough)
set -g set-clipboard on
set -g allow-passthrough on

# Undercurl / underline color support
set -ga terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -ga terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Optional: fallback for terminals that don't declare 24-bit color correctly
if -b '[[ "$COLORTERM" == *truecolor* ]]' 'set -ga terminal-overrides ",*:Tc"'

# use bracketed paste, if the running application (vim/emacs/weechat) has sent the terminal code to enable it.
bind-key ] paste-buffer -p

# increase scroll-back history
set -g history-limit 5000

# command sequence for nested tmux
bind-key s send-prefix

# scale base on client window size
setw -g aggressive-resize on

# Focus events (for editors like Vim/Neovim)
setw -g focus-events on

# disable mouse
setw -g mouse on

# Faster response (better Vim/TUI experience)
set -sg escape-time 0
set -g repeat-time 1000

# Smoother status refresh
set -g status-interval 2

# Prevents tmux closing if a session is killed
set -g detach-on-destroy off

# Window/pane numbering starts at 1
set -g base-index 1
setw -g pane-base-index 1

# Activity alerts
set -g visual-activity on
setw -g monitor-activity on

# Auto-renumber windows when one was closed
set -g renumber-windows on
# }}}

# Key Bindings {{{

# NOTES: bind-key = bind; TMUX is weird whenever the command is unique, we can always shorten it
#        bind-key -T prefix <key> = bind-key <key> = means always expect prefix
#        bind-key -n <key> = bind-keys -T root = Literal keys without prefix

# Use Ctrl-s as prefix (less conflict than C-b)
unbind C-b
unbind C-s
set -g prefix C-s

# Copy mode (Vim style)
setw -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi Enter send -X copy-selection-and-cancel

# Paste (prefix + p)
unbind C-p
bind C-p paste-buffer

# new window
bind-key -T prefix t new-window -c "#{pane_current_path}"

# Split windows, preserving CWD
bind-key -T prefix | split-window -h -c "#{pane_current_path}"
bind-key -T prefix v split-window -h -c "#{pane_current_path}"
bind-key -T prefix s split-window -v -c "#{pane_current_path}"
bind-key -T prefix - split-window -v -c "#{pane_current_path}"

# Resize panes faster
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# force a reload of the config file
bind-key -T prefix r source-file ~/.tmux.conf \; display "Config reloaded!"

# kill sessions
bind-key -T prefix k confirm-before -p "kill-session #S? (y/n)" kill-session

bind-key -T prefix x kill-pane   # kill pane without prompt
bind-key -T prefix q kill-window # kill window without prompt

# Optional: clock mode on prefix + &
bind-key -T prefix & clock-mode

# list sessions
unbind l
bind l choose-session

# Send clear message
bind-key C-l send-key C-l

# https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t
if-shell '[ "$(echo "$TMUX_VERSION >= 3.1" | bc)" = 1 ]' '\
  unbind C-b; \
  bind-key -n C-b command-prompt -kp key "send %%%"'
# }}}

# Smart Clipboard Detection (Local vs SSH) {{{

# reattach-to-user-namespace not need for tmux v2.6+
# REFERENCE: https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/issues/66

# Detect if we're inside an SSH session
if-shell '[ -n "$SSH_CONNECTION" ]' \
  'set -g @is_ssh 1'

# Define OSC52 copy command (for remote use)
set -g @osc52_cmd "osc52"

# Define local copy command (auto-choose xclip/pbcopy)
if-shell 'command -v xclip >/dev/null 2>&1' \
  'set -g @local_clip "xclip -i -selection clipboard"' \
  'if-shell "command -v pbcopy >/dev/null 2>&1" "set -g @local_clip pbcopy" "set -g @local_clip cat"'

# Bindings for copy mode (Vim style)
# If SSH: use OSC52; if local: use xclip/pbcopy
if-shell '[ -n "#{@is_ssh}" ]' \
  'bind -T copy-mode-vi y send -X copy-pipe-and-cancel "#{@osc52_cmd}"' \
  'bind -T copy-mode-vi y send -X copy-pipe-and-cancel "#{@local_clip}"'

if-shell '[ -n "#{@is_ssh}" ]' \
  'bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "#{@osc52_cmd}"' \
  'bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "#{@local_clip}"'

# if-shell 'test "$(uname)" = "Darwin"' 'source ~/dotfiles/config/tmux/config.osx.tmux'
# if-shell 'test "$(uname)" = "Linux"'  'source ~/dotfiles/config/tmux/config.linux.tmux'
# }}}

# Plugins (TPM) - https://github.com/tmux-plugins/tpm {{{
# Commands: <prefix>I - Install, <prefix>U - Update, <prefix><alt>u - Uninstall
# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-copycat' # C-f: files, C-g: git files, A-h: SHA, C-u: url, C-d: digits, A-i: ip address,
set -g @plugin 'christoomey/vim-tmux-navigator' # See: https://github.com/christoomey/vim-tmux-navigator
set -g @plugin 'erikw/tmux-dark-notify' # auto switch dark/light theme
# set -g @plugin 'spywhere/tmux-now-playing' # FIX: Not working. See: https://github.com/spywhere/tmux-now-playing
# set -g @plugin 'tmux-plugins/tmux-yank'

set -g @dark-notify-theme-path-light '$HOME/dotfiles/tmux/theme.tokyonight.day.tmux'
set -g @dark-notify-theme-path-dark  '$HOME/dotfiles/tmux/theme.tokyonight.mod.tmux'

run-shell '~/.tmux/plugins/tpm/tpm'
# }}}

# Color & Status Settings {{{

source ~/dotfiles/config/tmux/theme.tokyonight.mod.tmux
if-shell "test -e ~/.local/state/tmux/tmux-dark-notify-theme.conf" \
    "source-file ~/.local/state/tmux/tmux-dark-notify-theme.conf"

# }}}

